C$PROG KINEQ
C
C     GOOD OL PROGRAM KINEQ
C     EQUIPPED WITH NEW MASS-EXCESS ROUTINE
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     ------------------------------------------------------------------
      COMMON/LLL/ MSSG(28),NAMPROG(2),LOGUT,LOGUP,LISFLG,MSGF
      INTEGER*4   MSSG,NAMPROG,LOGUT,LOGUP
      CHARACTER*4 LISFLG,MSGF
      CHARACTER*112 CMSSG
      EQUIVALENCE (CMSSG,MSSG)
C     ------------------------------------------------------------------
      INTEGER*4 IHELP(15,20),IHED(15,3),KRAK(20)
C
      CHARACTER*60 CHELP(20),CHED(3)
C
      DIMENSION VAL(4),DATAA(4),DATAE(4)
C
      DIMENSION THCM3(2),E3(2),CMTOLB(2)
      DIMENSION JRAK(10),A(4),JATA(4),JATZ(4)
      INTEGER*4 IWD(20),LWD(2,40),ITYP(40)
      INTEGER*4 NAMCMD(20)
C
      CHARACTER*4  KMD,MODEN,KINDN,ASTAT,ESTAT,BLANK,IFLG(3)
C
      EQUIVALENCE (KMD,IWD(1))
      EQUIVALENCE (JRAK(1),KRAK(1))
      EQUIVALENCE (CHELP,IHELP),(CHED,IHED)
C
      DATA CHELP/
     1'CMD..Associated data....Meaning or Action                   ',
     2'HELP                    Displays this list again            ',
     3'REL                     Specifies relativistic kinematics   ',
     4'CLAS                    Specifies classical    kinematics   ',
     5'Q                       Specifies Q-value calculations only ',
     6'LEV  ELEV               ELEV gives level-energy in MeV      ',
     7'FUNA ELAB,AMIN,AMAX,DA  Says calc vs lab-angle of OUTGOING  ',
     8'FUNA                    Calc vs lab-angle: use previovs data',
     9'FUNE ALAB,EMIN,EMAX,DE  Says calc vs lab-energy of OUTGOING ',
     A'FUNE                    Calc vs lab-energy:use previovs data',
     1'                        ELAB,EMIN,EMAX & DE are in MeV      ',
     2'                        ALAB,AMIN,AMAX & DA are in degrees  ',
     3'TARG(PROJ,OUT)RES       Specifies reaction of interest      ',
     4'TARG(PROJ,OUT)          Same as above but RESIDUAL computed ',
     5'TARG(PROJ)              Fusion reaction (Q-values only)     ',
     6'STAT                    Displays current "conditions"       ',
     7'GO                      Says DO IT - output to kineq.log    ',
     8'GOS                     Says GO (to screen only) (REL only) ',
     9'CMD fil                 Open & read commands from fil.cmd   ',
     A'END                     Ends program                        '/
C
      DATA CHED/
     1'PROGRAM KINEQ - RELATIVISTIC KINEMATICS CALCULATION         ',
     1'PROGRAM KINEQ - CLASSICAL KINEMATICS CALCULATION            ',
     1'PROGRAM KINEQ - Q-VALUE CALCULATIONS                        '/
C
      DATA DATAA/100.0,5.0,100.0,5.0/
      DATA DATAE/45.0,100.0,200.0,10.0/
      DATA JRAK/10*Z'20202020'/
C
      DATA LCI,LIN,LCM/5,5,3/
C
      CHARACTER*4 cNAMPROG(2)
      equivalence (cnamprog, namprog)
      DATA cNAMPROG/'KINE','Q   '/
C
      DATA BLANK/'    '/
C
      SAVE
C
C     ------------------------------------------------------------------
C
      CMSSG=' '
      LOGUT=6
      LOGUP=7
      LISFLG='LOF '
      MSGF='    '
C
      OPEN(UNIT       = LOGUP,
     &     FILE       = 'kineq.log',
     &     STATUS     = 'REPLACE')
C
      WRITE(6,125)IHELP
      IFLG(1)='TABL'
      IFLG(2)='GARV'
      IFLG(3)='MYER'
      MODE=1
      MODEN='REL '
      ELEV=0.0
      KIND=1
      KINDN='FUNA'
      NBLNQ=0
      NLNQ=100
      IFAIL=10
      ASTAT='BAD '
      ESTAT='BAD '
      GSQ=0.0
      ISOR=1
C
      GO TO 100
C
   30 WRITE(6,35)
   35 FORMAT(1H ,'READ ERROR - CONTROL RETURNED TO VDT')
      LIN=5
      GO TO 100
C
   40 WRITE(6,45)
   45 FORMAT(1H ,'END-OF-FILE ENCOUNTERED - CONTROL RETURNED TO VDT')
      LIN=5
C
  100 IF(LIN.EQ.5) WRITE(6,102)
  102 FORMAT(' KINEQ->',$)
C
      READ(LIN,105,ERR=30,END=40)IWD
  105 FORMAT(20A4)
      IF(KMD.EQ.BLANK) GO TO 100
C
      IF(LIN.NE.5) WRITE(6,106)IWD
  106 FORMAT(1H ,19A4,A3)
C
      CALL CASEUP1(IWD)
C
      IF(KMD.EQ.'CMD ') GO TO 110
      IF(KMD.EQ.'CMDF') GO TO 110
C
      CALL CASEUP(IWD)
C
      IF(KMD.EQ.'END ') STOP
      IF(KMD.EQ.'HELP') GO TO 120
      IF(KMD.EQ.'REL ') GO TO 130
      IF(KMD.EQ.'CLAS') GO TO 140
      IF(KMD.EQ.'Q   ') GO TO 150
      IF(KMD.EQ.'STAT') GO TO 160
      IF(KMD.EQ.'LEV ') GO TO 200
      IF(KMD.EQ.'FUNA') GO TO 200
      IF(KMD.EQ.'FUNE') GO TO 200
      IF(KMD.EQ.'GO  ') GO TO 350
      IF(KMD.EQ.'GOS ') GO TO 350
C
      GO TO 290
C
  110 CALL CMDOPEN(IWD,NAMCMD,LCI,LIN,LCM,IERR)
      GO TO 100
C
  120 WRITE(6,125)IHELP
  125 FORMAT(1H ,15A4)
      GO TO 100
C
  130 MODE=1
      MODEN='REL '
      GO TO 100
  140 MODE=2
      MODEN='CLAS'
      GO TO 100
  150 MODE=3
      MODEN='Q   '
      GO TO 100
C
  160 WRITE(6,162)MODEN,KINDN
  162 FORMAT(1H ,'MODE = ',A4,'   KIND = ',A4)
      IF(IFAIL.EQ.0) WRITE(6,164)JRAK
      IF(IFAIL.EQ.4) WRITE(6,166)JRAK
      IF(IFAIL.NE.0.AND.IFAIL.NE.4) WRITE(6,168)
  164 FORMAT(1H ,10A4)
  166 FORMAT(1H ,10A4,' GOOD FOR Q-VALUES ONLY')
  168 FORMAT(1H ,'REACTION NOT SPECIFIED')
      WRITE(6,170)ELEV
  170 FORMAT(1H ,'LEV =',F8.3,' MEV')
      IF(ASTAT.EQ.'GOOD') WRITE(6,172)DATAA
      IF(ASTAT.NE.'GOOD') WRITE(6,174)
      IF(ESTAT.EQ.'GOOD') WRITE(6,176)DATAE
      IF(ESTAT.NE.'GOOD') WRITE(6,178)
  172 FORMAT(1H ,'ELAB,AMIN,AMAX,DA =',4F9.3)
  174 FORMAT(1H ,'ELAB,AMIN,AMAX,DA - NOT SPECIFIED')
  176 FORMAT(1H ,'ALAB,EMIN,EMAX,DE =',4F9.3)
  178 FORMAT(1H ,'ALAB,EMIN,ENAX,DE - NOT SPECIFIED')
      GO TO 100
C
  200 CALL GREAD(IWD,LWD,ITYP,NF,1,80,NTER)
      IF(NTER.NE.0) GO TO 1000
      IF(NF.GT.5)   GO TO 1000
C
      N=0
      DO 210 J=2,NF
      N=N+1
      CALL DMILV(LWD(1,J),IV,VAL(N),KIN,IERR)
      IF(IERR.NE.0) GO TO 1000
  210 CONTINUE
C
      IF(KMD.EQ.'LEV ') GO TO 220
      IF(KMD.EQ.'FUNA') GO TO 230
      IF(KMD.EQ.'FUNE') GO TO 240
C
      GO TO 1000
C
  220 IF(NF.NE.2) GO TO 1000
      ELEV=VAL(1)
      GO TO 100
C
  230 IF(NF.EQ.1) GO TO 236
      IF(NF.NE.5) GO TO 1000
      ASTAT='BAD '
      DO 235 I=1,4
      DATAA(I)=VAL(I)
  235 CONTINUE
      ASTAT='GOOD'
  236 KIND=1
      KINDN='FUNA'
      GO TO 100
C
  240 IF(NF.EQ.1) GO TO 246
      IF(NF.NE.5) GO TO 1000
      ESTAT='BAD '
      DO 245 I=1,4
      DATAE(I)=VAL(I)
  245 CONTINUE
      ESTAT='GOOD'
  246 KIND=2
      KINDN='FUNE'
      GO TO 100
C
  290 IBL=NXBL(IWD,1,80)
      IF(IBL.GT.1) GO TO 300
      GO TO 1000
C
  300 N=0
      JTEMP=Z'20'
      DO 310 I=1,80
      CALL ISBYTE(JTEMP,KRAK,N)
      N=N+1
      IF(I.GT.IBL) GO TO 310
      CALL ILBYTE(ITEMP,IWD,N-1)
      CALL ISBYTE(ITEMP,KRAK,N-1)
  310 CONTINUE
C
      CALL PARTFI(KRAK,IBL,A,JATA,JATZ,GSQ,IFAIL,ISOR)
      CALL FAILMSG(IFAIL)
      GO TO 100
C
  350 IF(IFAIL.EQ.0) GO TO 360
      IF(IFAIL.EQ.4.AND.MODEN.EQ.'Q   ') GO TO 360
      GO TO 1020
  360 NLN=100
      NBLN=0
      Q=GSQ-ELEV
C
      IF(MODEN.EQ.'Q   ') GO TO 650
      IF(KINDN.EQ.'FUNA') GO TO 370
      IF(KINDN.EQ.'FUNE') GO TO 380
C
  370 IF(ASTAT.NE.'GOOD') GO TO 1030
      EIN=DATAA(1)
      THAD=DATAA(2)
      DTHD=DATAA(4)
      DEIN=0.0
      XIDO=(DATAA(3)-DATAA(2))/DATAA(4)+1.0
      IDO=XIDO
      GO TO 390
C
  380 IF(ESTAT.NE.'GOOD') GO TO 1040
      THAD=DATAE(1)
      EIN=DATAE(2)
      DEIN=DATAE(4)
      DTHD=0.0
      XIDO=(DATAE(3)-DATAE(2))/DATAE(4)+1.0
      IDO=XIDO
C
  390 IF(MODEN.EQ.'REL ') GO TO 400
      IF(MODEN.EQ.'CLAS') GO TO 580
C
  400 IF(KMD.NE.'GOS ') GO TO 460
C
      WRITE(6,410)(IHED(K,MODE),K=1,15)
  410 FORMAT(1H ,15A4)
      WRITE(6,420)
  420 FORMAT(1H ,6X,6HA-PROJ,6X,6HA-TARG,7X,5HA-OUT,7X,5HA-RES,
     17X,5HE-LEV,11X,1HQ)
      WRITE(6,430)A,ELEV,Q,IFLG(ISOR)
  430 FORMAT(1H ,6F12.6,2X,A4)
      WRITE(6,440)
  440 FORMAT(1H ,'  E(MeV)  THLB-O THCM-O1 E(MeV)1   DO/DC1',
     &' THCM-O2 E(MeV)2   DO/DC2       SIGR')
      NBLN=0
      NLN=10
C
C     **************************************************************
C     DO RELATIVISTIC KINEMATICS CALCULATION
C     **************************************************************
C
  460 DO 570 I=1,IDO
      IF(NLN.LT.55) GO TO 510
      WRITE(7,470)(IHED(K,MODE),K=1,15)
  470 FORMAT(1H1,15A4/)
      WRITE(7,480)
  480 FORMAT(41X,6X,6HA-PROJ,6X,6HA-TARG,7X,5HA-OUT,7X,5HA-RES,
     17X,5HE-LEV,11X,1HQ/)
      WRITE(7,490)JRAK,A,ELEV,Q,IFLG(ISOR)
  490 FORMAT(1H ,10A4,6F12.6,2X,A4/)
      WRITE(7,500)
  500 FORMAT(1H ,'      E(MEV)      THLB-O     THCM-O1     E(MEV)1',
     1'   DWO/DWCM1     THCM-O2     E(MEV)2   DWO/DWCM2  NSOL ',
     1' SIGR(MB/STR)CM'/)
      NLN=10
      NBLN=0
  510 IF(NBLN.LT.5) GO TO 520
      IF(KMD.EQ.'GO  ') WRITE(7,610)
      IF(KMD.EQ.'GOS ') WRITE(6,610)
      NBLN=0
      NLN=NLN+1
  520 THCM3(2)=0.0
      E3(2)=0.0
      CMTOLB(2)=0.0
      CALL RELKIN(A,EIN,THAD,THCM3,CMTOLB,E3,Q,NSOL)
      IF(NSOL.GE.1) GO TO 530
      GO TO (100,560),KIND
C
C     CALCULATE RUTHERFORD X-SECT IF ELASTIC SCATT
C
  530 SIGRUT=0.0
      IF(ABS(Q).GT.0.1) GO TO 540
      IF(JATA(1).NE.JATA(3)) GO TO 540
      IF(JATA(2).NE.JATA(4)) GO TO 540
      ZSQ=(JATZ(1)*JATZ(2))**2
      RATM=((A(1)+A(2))/A(2))**2
      CRUT=1.296*ZSQ*RATM
      HANG=3.1415926*THCM3(1)/360.0
      IF(HANG.LT.1.0E-4) GO TO 540
      CSC4=(1.0/DSIN(HANG))**4
      SIGRUT=CRUT*CSC4/(EIN*EIN)
  540 IF(KMD.EQ.'GO  ') THEN
      WRITE(7,550)EIN,THAD,THCM3(1),E3(1),CMTOLB(1),THCM3(2),E3(2),
     1CMTOLB(2),NSOL,SIGRUT
                        ENDIF
C
      IF(KMD.EQ.'GOS ') THEN
      WRITE(6,555)EIN,THAD,THCM3(1),E3(1),CMTOLB(1),THCM3(2),E3(2),
     1CMTOLB(2),SIGRUT
                        ENDIF
C
  550 FORMAT(1H ,8F12.5,I6,E16.4)
  555 FORMAT(1H ,4F8.3,F9.4,2F8.3,F9.4,1PE11.3)
C
  560 THAD=THAD+DTHD
      EIN=EIN+DEIN
      NLN=NLN+1
      NBLN=NBLN+1
  570 CONTINUE
      GO TO 100
C
C     **************************************************************
C     DO CLASSICAL KINEMATICS CALCULATION
C     **************************************************************
C
  580 DO 640 I=1,IDO
      IF(NLN.LT.55) GO TO 600
      WRITE(7,470)(IHED(K,MODE),K=1,15)
      WRITE(7,480)
      WRITE(7,490)JRAK,A,ELEV,Q,IFLG(ISOR)
      WRITE(7,590)
  590 FORMAT(1H ,'    E(MEV)    THLB-O    THCM-O    THLB-R    THCM-R  ',
     1'E(MEV)-O  E(MEV)-R       V-R  DWO/DWCM  DWR/DWCM'/)
      NLN=10
      NBLN=0
  600 IF(NBLN.LT.5) GO TO 620
      WRITE(7,610)
  610 FORMAT(1H )
      NBLN=0
      NLN=NLN+1
  620 CALL CLASKI(A,EIN,THAD,THCO,THLR,THCR,EO,ER,VR,RO,RR,Q)
      WRITE(7,630)EIN,THAD,THCO,THLR,THCR,EO,ER,VR,RO,RR
  630 FORMAT(1H ,11F10.4)
      THAD=THAD+DTHD
      EIN=EIN+DEIN
      NLN=NLN+1
      NBLN=NBLN+1
  640 CONTINUE
      GO TO 100
C
C     **************************************************************
C     OUTPUT Q-VALUES ONLY
C     **************************************************************
C
  650 WRITE(6,660)GSQ
  660 FORMAT(' GSQ = ',F12.5)
      IF(NLNQ.LT.55) GO TO 670
      WRITE(7,470)(IHED(K,MODE),K=1,15)
      WRITE(7,480)
      NLNQ=0
      NBLNQ=0
  670 IF(NBLNQ.LT.5) GO TO 680
      WRITE(7,610)
      NBLNQ=0
      NLNQ=NLNQ+1
  680 WRITE(7,490)JRAK,A,ELEV,Q,IFLG(ISOR)
      NLNQ=NLNQ+1
      NBLNQ=NBLNQ+1
      GO TO 100
C
 1000 WRITE(6,1010)
 1010 FORMAT(1H ,'SYNTAX ERROR - COMMAND IGNORED')
      GO TO 100
 1020 WRITE(6,1025)
 1025 FORMAT(1H ,'REACTION IMPROPERLY SPECIFIED OR UNSPECIFIED')
      GO TO 100
 1030 WRITE(6,1035)
 1035 FORMAT(1H ,'DATA UNSPECIFIED FOR CALCULATION VS LAB-ANGLE')
      GO TO 100
 1040 WRITE(6,1045)
 1045 FORMAT(1H ,'DATA UNSPECIFIED FOR CALCULATION VS LAB-ENERGY')
      GO TO 100
      END
C$PROG CLASKI
      SUBROUTINE  CLASKI(AM,E,THLBO,THCMO,THLBR,THCMR,EO,ER,VR,RO,RR,Q)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      SAVE
C
      DIMENSION AM(4)
      RTOD=180./3.14159
      DTOR=1.0/RTOD
      AP=AM(1)
      AT=AM(2)
      AO=AM(3)
      AR=AM(4)
      THLBO=THLBO*DTOR
      A0=DSQRT(AO*(AO+AR-AT)/(AT*AR*(1.0+(Q/E)*(AO+AR)/AT)))
      AAR=A0*AR/AO
      X=A0*DSIN(THLBO)
      THCMO=DATAN(X/DSQRT(1.0-X*X))+THLBO
      THCMR=3.14159-THCMO
      THCMR=-THCMR
      THLBR=DATAN(DSIN(THCMO)/(DCOS(THCMO)-AAR))
      RAT=AO/AR*(DSIN(THLBO)/DSIN(THLBR))**2
      EO=(E+Q)/(RAT+1.0)
      ER=E+Q-EO
      VR=DSQRT(1.930*ER/AR)
      RO=(A0*DCOS(THCMO)+1.0)*(DSIN(THLBO)/DSIN(THCMO))**3
      RR=(AAR*DCOS(THCMO)-1.0)*(DSIN(THLBR)/DSIN(THCMO))**3
      THLBO=THLBO*RTOD
      THLBR=THLBR*RTOD
      THCMO=THCMO*RTOD
      THCMR=THCMR*RTOD
      RETURN
      END
C$PROG DMILV     - D.P. ASCII to numeric decoder for 8 character fields
C
C     ******************************************************************
C     BY W.T. MILNER AT HRIBF - LAST MODIFIED 05/17/2002
C     ******************************************************************
C
      SUBROUTINE DMILV(JWD,IV,XV,KIND,IERR)
C
      IMPLICIT NONE
C
C     ------------------------------------------------------------------
      COMMON/LLL/ MSSG(28),NAMPROG(2),LOGUT,LOGUP,LISFLG,MSGF
      INTEGER*4   MSSG,NAMPROG,LOGUT,LOGUP
      CHARACTER*4 LISFLG,MSGF
      CHARACTER*112 CMSSG
      EQUIVALENCE (CMSSG,MSSG)
C     ------------------------------------------------------------------
C
      INTEGER*4     IWD(2),JWD(2)
C
      CHARACTER*8   CIWD
      EQUIVALENCE  (CIWD,IWD)
C
      INTEGER*4     X2E,X44,X45,X65
      DATA          X2E,X44,X45,X65/Z'2E',Z'44',Z'45',Z'65'/
C
      INTEGER*4     IV,KIND,IERR,NDEC,IT,I
C
      REAL*8        XV
C
      SAVE
C
C     ------------------------------------------------------------------
C     ROUTINE TO TEST FOR AND RETURN LEGAL FIXED AND FLOATING VALUES
C     FIRST CHARACTER MUST BE +, -, ., OR DECIMAL DIGIT
C     DOES NOT SET IV OR XV IF ERROR OCCURRS
C     ------------------------------------------------------------------
C
      IERR=0
      KIND=0
      NDEC=0
C
      DO 10 I=1,2
      IWD(I)=JWD(I)
   10 CONTINUE
C
      DO 20 I=1,8
      CALL ILBYTE(IT,IWD,I-1)
      IF(IT.EQ.X2E) GO TO 200  !Tst for .
      IF(IT.EQ.X44) GO TO 200  !Tst for D
      IF(IT.EQ.X45) GO TO 200  !Tst for E
      IF(IT.EQ.X65) GO TO 200  !Tst for e
   20 CONTINUE
C
  100 READ(CIWD,110,ERR=500)IV
  110 FORMAT(I8)
      XV=DFLOAT(IV)
      KIND=1
      RETURN
C
  200 READ(CIWD,210,ERR=500)XV
  210 FORMAT(D8.0)
      IV=XV
      KIND=2
      RETURN
C
  500 WRITE(CMSSG,505)CIWD
  505 FORMAT('Error decoding string: ',A,' - 0-value returned')
      CALL MESSLOG(LOGUT,LOGUP)
      IERR=1
      RETURN
      END
C$PROG FAILMSG
      SUBROUTINE FAILMSG(IFAIL)
C
      INTEGER*4 MSG(10,13),LFAIL(12)
C
      CHARACTER*40 CMSG(13)
C
      EQUIVALENCE (CMSG,MSG)
C
      DATA CMSG/
     1'SYNTAX ERROR IN REACTION                ',
     2'REACTION ERROR - A-UNBALANCE            ',
     3'REACTION ERROR - Z-UNBALANCE            ',
     4'SUITABLE FOR Q-VALUES ONLY              ',
     5'TARGET NOT IN ELEMENT LIST              ',
     6'PROJECTILE NOT IN ELEMENT LIST          ',
     7'OUTGOING NOT IN ELEMENT LIST            ',
     8'RESIDUAL NOT IN ELEMENT LIST            ',
     9'TARGET OUTSIDE MASS FORMULA RANGE       ',
     A'PROJECTILE OUTSIDE MASS FORMULA RANGE   ',
     B'OUTGOING OUTSIDE MASS FORMULA RANGE     ',
     C'RESIDUAL OUTSIDE MASS FORMULA RANGE     ',
     D'ERROR - TYPE UNKNOWN                    '/
C
      DATA LFAIL/1,2,3,4,11,12,13,14,21,22,23,24/
C
      SAVE
C
      IF(IFAIL.EQ.0) RETURN
C
      DO 10 J=1,12
      IF(LFAIL(J).EQ.IFAIL) GO TO 20
   10 CONTINUE
      J=13
C
   20 WRITE(6,30)(MSG(I,J),I=1,10)
   30 FORMAT(1H ,10A4)
      RETURN
      END
C$PROG PARTFI
      SUBROUTINE PARTFI(JRAK,NJ,ATM,JATA,JATZ,Q,IFAIL,ISOR)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      CHARACTER*4  RESENT,REXIST
C
      INTEGER*4    KTMP(2)
      CHARACTER*4  CTMP(2)
      CHARACTER*8  CTMP8
      EQUIVALENCE (CTMP,KTMP),(CTMP8,KTMP)
C
      DIMENSION JRAK(20),A(10),KZ(10),KA(10),EXCS(10),ISORC(10)
      DIMENSION ATM(4),JATA(4),JATZ(4)
C
      INTEGER*4    NUCNA(120)
      CHARACTER*60 CNUCNA(8)
      EQUIVALENCE (CNUCNA,NUCNA)
C
      DATA CNUCNA/
     1 'H   HE  LI  BE  B   C   N   O   F   NE  NA  MG  AL  SI  P   '
     2,'S   CL  AR  K   CA  SC  TI  V   CR  MN  FE  CO  NI  CU  ZN  '
     3,'GA  GE  AS  SE  BR  KR  RB  SR  Y   ZR  NB  MO  TC  RU  RH  '
     4,'PD  AG  CD  IN  SN  SB  TE  I   XE  CS  BA  LA  CE  PR  ND  '
     5,'PM  SM  EU  GD  TB  DY  HO  ER  TM  YB  LU  HF  TA  W   RE  '
     6,'OS  IR  PT  AU  HG  TL  PB  BI  PO  AT  RN  FR  RA  AC  TH  '
     7,'PA  U   NP  PU  AM  CM  BK  CF  ES  FM  MD  NO  LR  RF  HA  '
     8,'NH  NS  HS  MT                                              '/
C
      SAVE
C
C     **************************************************************
C     THIS ROUTINE  EXTRACTS ATOMIC AND MASS NOS. FROM A REACTION
C     WRITTEN IN THE NATURAL WAY
C     **************************************************************
C     IFAIL=1  SAYS SYNTAX ERROR IN REACTION FORMAT
C     IFAIL=2 SAYS ERROR IN REACTION A BALANCE
C     IFAIL=3 SAYS ERROR IN REACTION Z BALANCE
C     IFAIL=11,12,13,14 SAYS NAME OF PARTICLE 1,2,3,4 NOT IN ELE LIST
C     IFAIL=21,22,23,24 SAYS PARTICLE 1,2,3,4 OUTSIDE MASS FORMULA RANGE
C     PARTICLE 1,2,3,4 MEANS TARG, PROJ, OUTGOING, RESIDUAL
C     **************************************************************
C
      RESENT='YES '                     !SET "RESIDUAL ENTERED" FLAG
      REXIST='YES '                     !SET "RESIDUAL EXISTS"  FLAG
      IFAIL=0                           !RESET FAIL-FLAG
C
      IHI=NXBL(JRAK,1,80)-1             !FIND 1ST BLANK (END OF REACT)
      IF(IHI.LE.0) GO TO 200            !TST FOR BLANK FIELD
C
      LRP=IFIND(JRAK,Z'29',1,IHI)       !FIND RIGHT-PAREN ")"
      IF(LRP.LE.0) GO TO 200            !TST FOR "NOT FOUND"
      IF(LRP.EQ.IHI) RESENT='NO  '      !SET FLAG IF RESIDUAL NULL
C
      LLP=IFIND(JRAK,Z'28',1,LRP)
      IF(LLP.LE.0) GO TO 200
C
      KASUM=0
      KZSUM=0
      LA=1
      LB=LLP-1
      NS=1
C
      CALL GETAZ(JRAK,LA,LB,KA(NS),KZ(NS),IERR)
      IF(IERR.NE.0) GO TO 200
C
   20 LA=LB+2
      IF(LA.GE.LRP) GO TO 50
      LB=IFIND(JRAK,Z'2C',LA,LRP)-1
      IF(LB.LE.0) LB=LRP-1
      NS=NS+1
      CALL GETAZ(JRAK,LA,LB,KA(NS),KZ(NS),IERR)
      IF(IERR.NE.0) GO TO 200
C
      IF(NS.LE.2) GO TO 20
      KASUM=KASUM+KA(NS)
      KZSUM=KZSUM+KZ(NS)
      GO TO 20
C
   50 IF(RESENT.EQ.'NO  ') GO TO 60
      LA=LRP+1
      LB=IHI
      NS=NS+1
      CALL GETAZ(JRAK,LA,LB,KA(NS),KZ(NS),IERR)
      IF(IERR.NE.0) GO TO 200
      GO TO 100
C
   60 NS=NS+1
      KA(NS)=KA(1)+KA(2)-KASUM
      KZ(NS)=KZ(1)+KZ(2)-KZSUM
C
      IF(KA(NS).EQ.0.AND.KZ(NS).EQ.0) THEN
                                      REXIST='NO  '
                                      IFAIL=4
                                      GO TO 100
                                      ENDIF
C
      CTMP(1)='    '
      CTMP(2)='    '
      WRITE(CTMP8,70)KA(NS)
   70 FORMAT(I4)
      KZZ=KZ(NS)
      CTMP(2)='??  '
      IF(KZZ.GE.1.AND.KZZ.LE.109) KTMP(2)=NUCNA(KZZ)
      CALL SQUEZL(KTMP,1,8)
      CALL LODUP(KTMP,1,8,JRAK,IHI+1)
C
  100 DO 180 KDO=1,NS
      ISORC(KDO)=1
      IZ=KZ(KDO)
      IA=KA(KDO)
C
      IF(KDO.NE.NS)        GO TO 110
      IF(REXIST.EQ.'YES ') GO TO 110
C
      DPEX=0.0D0   
      DPER=0.0D0
      GO TO 120
C
  110 CALL MASSEX(IZ,IA,DPEX,DPER,ISORC(KDO),IERR)
C
      IF(IERR.NE.0) GO TO 200
C
  120 EX=DPEX
      ER=DPER
      EXCS(KDO)=EX
      EX=EX/931494.0
      AA=KA(KDO)
      A(KDO)=AA+EX
  180 CONTINUE
      KASUM=0
      KZSUM=0
      ASUM=0.0
      IUP=NS-1
      IF(IUP.LT.3) GO TO 192
      DO 190 I=3,IUP
      KZSUM=KZSUM+KZ(I)
      KASUM=KASUM+KA(I)
      ASUM=ASUM+A(I)
  190 CONTINUE
  192 CONTINUE
      Q=(A(1)+A(2)-ASUM-A(NS))*931.494
      IF((KA(1)+KA(2)).NE.(KASUM+KA(NS))) IFAIL=2
      IF((KZ(1)+KZ(2)).NE.(KZSUM+KZ(NS))) IFAIL=3
      ATM(1)=A(2)
      ATM(2)=A(1)
      ATM(3)=ASUM
      ATM(4)=A(NS)
      JATA(1)=KA(2)
      JATA(2)=KA(1)
      JATA(3)=KASUM
      JATA(4)=KA(NS)
      JATZ(1)=KZ(2)
      JATZ(2)=KZ(1)
      JATZ(3)=KZSUM
      JATZ(4)=KZ(NS)
      ISOR=1
      IF(NS.LT.4.AND.IFAIL.EQ.0) IFAIL=4
      DO 210 I=1,NS
      IF(ISORC(I).GT.ISOR) ISOR=ISORC(I)
      IF(ISOR.GT.3) ISOR=3
  210 CONTINUE
      RETURN
  200 IFAIL=1
      RETURN
      END
C$PROG RELKIN
      SUBROUTINE RELKIN(ATM,EIN,THDEG,STHCM3,SCMTOLB,SE3,SQ,IJ)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      DIMENSION STHCM3(2),SCMTOLB(2),SE3(2)
C
      DIMENSION THCM3(2),THCM4(2),THETA4(2),E3(2),E4(2),CMTOLB(2)
      DIMENSION ATM(4)
      DATA PI/3.141592654D0/
      DATA DTOR/0.0174532925D0/
      DATA RTOD/57.29577951D0/
      DATA D1,D2,D3,D4/1.0D0,2.0D0,3.0D0,4.0D0/
C
      SAVE
C
C     INPUT MASSES IN C12 AMU UNITS
C     INPUT LAB ANGLES IN DEGREES
C     INPUT Q VALUES AND ENERGIES IN MEV
C     ATM(I),I=1,4 ARE MASSES OF P, T, O, R
C     THETA = LAB-ANGLE OF OUTGOING
C     THCM3(1)=CM-ANGLE OF OUTGOING  (SOLUTION 1)
C     THCM3(2)=CM-ANGLE OF OUTGOING  (SOLUTION 2)
C     CMTOLB(1)=SOLID ANGLE RATIO FOR SOLUTION 1
C     CMTOLB(2)=SOLID ANGLE RATIO FOR SOLUTION 2
C     E3(1)=LAB-ENERGY OF OUTGOING FOR SOLUTION 1
C     E3(2)=LAB-ENERGY OF OUTGOING FOR SOLUTION 2
C     Q = REACTION Q (MEV)
C     QGS = GROUND STATE Q VALUE
C     IJ = 1 OR 2 (THE NO. OF SOLUTIONS)  IJ=0 SAYS BOOTED
C
      XM1A=ATM(1)
      XM2A=ATM(2)
      XM3A=ATM(3)
      XM4A=ATM(4)
      Q=SQ
      IJ=0
      IF(XM1A.LE.0.0D0) RETURN
      E=EIN
      THETA=DTOR*THDEG
C
C     CHANGE REST MASSES TO ENERGY
C
      XM1=XM1A*931.494D0
      XM2=XM2A*931.494D0
      XM3=XM3A*931.494D0
      XM4B=XM4A*931.494D0
      QGS=XM1+XM2-XM3-XM4B
C
C     THIS  IS A CHECK TO INSURE REASONABLE Q VALUES AND MASSES
C     INPUT Q SHOULD BE LESS THAN OR EQUAL TO QGS
C
      IF((Q-QGS).LT.0.05D0) GO TO 4
      WRITE(7,20)
      WRITE(6,20)
      RETURN
C
C     IF Q IS LESS THAN QGS, IT IS ASSUMED THAT RESIDUAL NUCLEUS (PARTIC
C     LE 4)  IS IN EXCITED STATE OF QGS-Q . ADD THIS ENERGY TO MASS.
C
    4 XM4=XM4B+QGS-Q
C
C     DEFINE QUANTITIES TO BE USED IN LATER EQUATIONS
C
      E1=EIN+XM1
C
C     CALCULATE THRESHOLD ENERGY
C
      ETH=-Q*(XM1+XM2+XM3+XM4)/(D2*XM2)+XM1
C
C     THE NEXT STATEMENT IS A CHECK FOR THRESHOLD VALUES
C
      IF(E1.GT.ETH) GO TO 6
      WRITE(7,21)EIN
      WRITE(6,21)EIN
      RETURN
C
    6 ET=E1+XM2
      P1=DSQRT(E1*E1-XM1*XM1)
C
C     THE REST OF THE PROGRAM DOWN TO STATEMENT 5 COMPUTES THE ANGLES
C     AND ENERGIES
C
C
      SITH3=DSIN(THETA)
      COTH3=DCOS(THETA)
C
C     CHECK TO SEE IF PARTICLE HAS ENOUGH ENERGY FOR ANGLE
C
      CHECK=(XM2*E1+(XM1**2+XM2**2-XM3**2-XM4**2)/D2)**2
     1 -(XM3*XM4)**2-(P1*XM3*SITH3)**2
      IF(CHECK.GE.0.0D0) GO TO 8
      WRITE(7,22)EIN,THDEG
      WRITE(6,23)EIN,THDEG
      RETURN
C
C     CALCULATE CENTER OF MASS ENERGIES
C
    8 ECMT=DSQRT(XM1**2+XM2**2+D2*XM2*E1)
      ECM1=(XM1**2+XM2*E1)/ECMT
      ECM2=(XM2**2+XM2*E1)/ECMT
      ECM3=(ECMT**2+XM3**2-XM4**2)/(D2*ECMT)
      ECM4=(ECMT**2+XM4**2-XM3**2)/(D2*ECMT)
C
C     PCM # CENTER OF MASS MOMENTUM OF OUTGOING PARTICLES
C
      PCM=DSQRT(ECM4**2-XM4**2)
C
C     ALPHA DETERMINES IF THERE IS ONE OR TWO SOLUTIONS FOR E3 AT ANGLE
C     THETA3
C
      ALPHA=P1*(D1+(XM3**2-XM4**2)/ECMT**2)/((ET)*DSQRT((D1-((XM3+XM4)/
     1ECMT)**2)*(D1-((XM3-XM4)/ECMT)**2)))
C
C
C     IJ=1,2 DENOTES 1,2 SOLUTIONS FOR E3
C
      IJ=1
C*    IF(ALPHA.GT.1.000001) IJ=2       - 3200 VERSION
      IF(ALPHA.GT.1.000001D0) IJ=2
      DO 16 I=1,IJ
C
C     CALCULATION OF ENERGY OF OUTGOING PARTICLE 3
C
      FI=I
      E3(I)=(ET*(XM2*E1+(XM1**2+XM2**2+XM3**2-XM4**2)/D2)
     1 +(D3-D2*FI)*P1*COTH3*DSQRT(CHECK))/(ET**2-(P1*COTH3)**2)
      IF(E3(I)**2.LT.XM3**2) GO TO 18
C
C     SINCE ET=E3+E4
C
      E4(I)=ET-E3(I)
      IF(E4(I)**2.LT.XM4**2) GO TO 18
C
C     CALCULATE  MOMENTA OF PARTICLES 3 AND 4
C
      P3=DSQRT(E3(I)**2-XM3**2)
      P4=DSQRT(E4(I)**2-XM4**2)
C
      BETA=P1/ET
      GAMMA=ET/ECMT
C
C     CALCULATE CENTER OF MASS SCATTERING ANGLES OF PARTICLES 3 AND 4
C
      SICM=P3*SITH3/PCM
      COCM=GAMMA*(P3*COTH3-BETA*E3(I))/PCM
      THCM3(I)=DATAN(SICM/COCM)
      THCM4(I)=PI-THCM3(I)
C
C     CALCULATE LAB SCATTERING ANGLE OF PARTICLE 4
C
C
C     IF E4=0 THEN THETA(4)=PI/2
C
      THETA4(I)=PI/D2
      IF(E4(I).LE.(XM4+1.0D-6)) GO TO 13
      SITH4=P3*SITH3/P4
      COTH4=(P1-P3*COTH3)/P4
      THETA4(I)=DATAN(SITH4/COTH4)
C
C     DETERMINE CM TO LAB RATIO OF DIFFERENTIAL CROSS SECTION
C
   13 FI=I
      CMTOLB(I)=(D3-D2*FI)*ET/ECMT*(D1+P1/ET*(ET**2-P1**2+XM3**2-XM4**2)
     1 /DSQRT((ET**2-P1**2+XM3**2-XM4**2)**2-D4*ECMT**2*XM3**2)*COCM)*
     2 PCM**3/P3**3
C
C     CHANGE ANGLES TO DEGREES
C
      THCM4(I)=THCM4(I)*RTOD
      THCM3(I)=THCM3(I)*RTOD
      THETA4(I)=THETA4(I)*RTOD
      IF(THCM3(I).LT.0.0D0) THCM3(I)=THCM3(I)+180.0D0
C
C     CHANGE ENERGIES TO KINETIC ENERGY (MEV)
C
      E3(I)=E3(I)-XM3
      E4(I)=E4(I)-XM4
   16 CONTINUE
      ECM1=ECM1-XM1
      ECM2=ECM2-XM2
      ECM3=ECM3-XM3
      ECM4=ECM4-XM4
C
C     COMPUTE SINGLE PRECISION RESULTS
C
      DO 17 I=1,2
      STHCM3(I)=THCM3(I)
      SCMTOLB(I)=CMTOLB(I)
      SE3(I)=E3(I)
   17 CONTINUE
      RETURN
   18 WRITE(7,22)EIN,THDEG
      WRITE(7,23)EIN,THDEG
      IJ=0
      RETURN
C
C
   20 FORMAT (/////' EITHER MASS VALUES OR Q VALUE WAS BOOTED')
   21 FORMAT (/' LAB BOMBARDING ENERGY = ',F10.5,' MEV IS BELOW REACT',
     &'ION THRESHOLD ENERGY',F6.1)
   22 FORMAT (' LAB BOMBARDING ENERGY = ',F10.5,' MEV IS ABOVE REACTI',
     &'ON THRESHOLD ENERGY,BUT TOO LOW FOR THETA LAB = ',F10.5,F6.1)
C
   23 FORMAT(1H ,'LAB BOMBARDING ENERGY=',F10.5,' MeV ABOVE REACTION'/,
     &' THRESHOLD ENERGY, BUT TOO LOW FOR THETA-LAB=',F10.5,F6.1)
      END
