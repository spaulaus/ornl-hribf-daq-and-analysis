RPD$075066
CHP$U620  FITU - A General 1-D Fitting Package - WTM
TPF$
SP2$
CEB$
A Spline, Linear & Non-Linear (least squares) Fitting Program
CYB$
---------------------------------------------------------------------------
Define:     Spline Fitting  =      Spline-Under-Tension Fitting

Define:     Linear Fitting  =      Linear-Least-Squares Fitting

Define: Non-Linear Fitting  =  Non-Linear-Least-Squares Fitting
---------------------------------------------------------------------------

CYB$
Sec Page Contents

010   2  Introduction - for     Spline Fitting
020   3  Introduction - for     Linear Fitting
030   3  Introduction - for Non-Linear Fitting
040   4  Introduction - Input Data Format
 
050   5  Commands which Apply to Spline,  Linear & Non-linear Procedures

060   6  Commands for Setup/Control of Spline Fitting

070   7  Commands for Setup/Control of Linear Fitting
080   8  Expanded Definitions of some  Linear Fitting Commands
090   8  Definition of Some Output for Linear Fitting

100   9  Commands for Setup/Control of Non-Linear Fitting
110   9  A Brief Description of the    Non-Linear Fitting Procedure

120  10  Template make-file (and Comments) for Customized Processes
130  11  Example (default) Non-linear Support Routine - USERCMP
140  15  Example (default) Non-linear Support Routine - USERFOX
 
150  16  Commands Related to Filename Variables, Symbols and Loops
160  17  Comments
SP2$
CEN$
\bu\FOREWORD\\
BLP$
Program \b\FITU\\ is an enhanced version of program \b\FUNKYFIT\\ that
provides graphical displays of fit results of \b\Spline, Linear\\ and
\b\Non-Linear\\ fitting. User customization is supported for the
Non-Linear process.
There are some changes in the format
of the output but the input data format is unchanged.
SP2$
CEN$
\bu\HOW TO GET STARTED\\
CYB$
---------------------------------------------------------------------------
Type:  fitu               ;To start if \b\/usr/hhirf/\\ is defined in your
                          ;.login, or .cshrc files, otherwise:

Type:  /usr/hhirf/fitu    ;To start on HRIBF Alpha or Linux platforms
---------------------------------------------------------------------------
TPF$
SP1$
SEC$.010  Introduction - for Spline Fitting
BLP$
The spline fitting feature provided here uses a package of subroutines
for computing "spline under tension" obtained from the following source:
CYb$
       From Fitpack -- August 31, 1981
       Coded by A. K. Cline and R. J. Renka
       Department of Computer Sciences
       University of Texas at Austin
BLP$
There are three parameters which may be specified by the user. These
are \b\S, EPS & SIGMA\\ which are discussed below. Default values are:
CYB$
S     =  FLOAT(N)            ;Where N is the number of X,Y points to fit
EPS   =  SQRT(2.0/FLOAT(N))
SIGMA =  1.0
ODP$
\b\S......\\contains the value controlling the smoothing. This
must be non-negative. For S equal to zero, the
subroutine does interpolation, larger values lead to
smoother funtions. If parameter D contains standard
deviation estimates, a reasonable value for S is
FLOAT(N).
ODP$
\b\EPS....\\contains a tolerance on the relative precision to
which S is to be interpreted. This must be greater than
or equal to zero and less than or equal to one. A
reasonable value for EPS is SQRT(2.0/FLOAT(N)).
ODP$
\b\SIGMA..\\contains the tension factor. This value indicates
the degree to which the first derivative part of the
smoothing functional is emphasized. If SIGMA is nearly
zero (e.g. .001) the resulting curve is approximately a
cubic spline. If SIGMA is large (e.g. 50.) the
resulting curve is nearly a polygonal line. If SIGMA
equals zero a cubic spline results. A standard value for
SIGMA is approx 1.
BLP$
Spline fitting is probably most useful in providing smoothed interpolation
of experimental data since it can "draw a curve" through almost any
\b\1-D\\ data set with increasing X-values. It is not useful in 
characterizing a data set as being linear, quadratic, cubic, expodential,
etc. since it only generates an array of parameters (2nd derivatives) equal
to the number of data points.
BLP$
You can use the Spline Fitting feature of \b\FITU\\ to fit your data,
display the fit, and adjust \b\S, EPS & SIGMA\\ and uncertainties
until you like what
you see and then utilize the Spline routines \b\CURVS & CURV2\\ 
(included in \b\ORPHLIB\\) to interplolate the data for your own 
program. 
CY1$
See \b\ORPHLIB\\ documentation SEC#480 for a description of \B\CURVS & CURV2\\.
CEN$
\bu\Briefly:\\
BON$
BLP$
Use FITU to adjust S, EPS, SIGMA and uncertainties until you like the fit.
BLP$
Link to ORPHLIB to get routines CURVS & CURV2 to provide interpolated
values to your oun probram. 
CEN$
\BU\IMPORTANT!\\
BLP$
Maintain the same S, EPS, SIGMA and uncertainties as was used by FITU
to get the fit that you liked.
BOF$
TPF$
SEC$.020  Introduction for Linear Fitting
BLP$
FITU is a general purpose linear-least-squares fitting program 
which fits sets of (X,Y) points to a linear combination of up to
20 algebraic functions.
Directives are used to choose one of the following forms for the
fit.
CYB$
               J=N
      Y(X) = SUM   B(J)*F(J,X)
               J=1

               J=N
      Y(X) = SUM   B(J)*F(J,LOG(X))
               J=1

                    J=N
      LOG(Y(X)) = SUM   B(J)*F(J,X)
                    J=1

                    J=N
      LOG(Y(X)) = SUM   B(J)*F(J,LOG(X))
                    J=1
BLP$
Where N is the no. of terms (functions of X) and F(J,X) denotes the Jth
function of X. B(J) denotes the Jth coefficient which is determined in the
fit.
Experimental and calculated values, coefficients, errors and CHISQ values
are listed.
Although most of the output from FITU should be self-explanatory,
some quantities are defined in SEC#090.
SP2$
SEC$.030  Introduction for Non-Linear Fitting
BLP$
Non-Linear fitting of data to a function Y(X) is carried out via the
gradient search method. The user must create a customized version of
\b\FITU\\ by linking a user supplied REAL*8 function \b\USERFOX\\ which 
computes the function value and a user command processor \b\USERCMP\\
which supports it.
ODP$
o......Create a routine \b\USERFOX\\ to compute the value of the 
function (or functions) using
the value of \b\X\\ and the coefficient array \b\A\\ passed in the
argument list. 
ODP$
o......Create a user command processor \b\USERCMP\\ to support 
\b\USERFOX\\.
ODP$
o......Note: that \b\USERFOX\\ can be a multi-function routine. In such a
case, \b\USERCMP\\ can be used to select which function is actually
used for a given fit request.
ODP$
o......Use the template make-file given in SEC#120 to create your
customized version of \b\FITU\\.
CYB$
See SEC#120 for a listing of the template make-file

See SEC#130 for an example USERCMP

See SEC#140 for an example USERFOX
BLP$
Note: that most of the functions in the example \b\USERFOX\\ are 
not actually non-linear. I used these to check that linear and
non-linear procedures gave nearly the same results.
TPF$
SP2$
SEC$.040  Introduction - Input Data Format
SP1$
BLP$
Data to be fitted can be read from a file or entered interactively. In 
either case the format is the same. The structure is illustrated
as follows:
CY1$
---------------------------------------------------------------------------
DATA             ;Introduces Y vs X DATA-SET
X  Y <YERR>      ;Up to 500 DATA-SET entries
X  Y <YERR>
.
.
ENDA             ;Ends DATA-SET

DATA             ;Introduces Y vs X DATA-SET             
X  Y <YERR>      ;Up to 500 entries (X,Y values)
X  Y <YERR>      ;YERR is optional
.
.             
ENDA             ;Ends this   DATA-SET
---------------------------------------------------------------------------
BLP$
The ACCII directive \b\DATA\\
Introduces a list of (X,Y,U) or (X,Y) entries (i.e. a data set).
Here U denotes the uncertainty in Y.
The first data point is on the line following the \b\DATA\\ label.
Data points are entered one-per-line and up to 500 points are allowed.
The data set is terminated with an \b\ENDA\\ directive which must start
in column 1.
The \b\ENDA\\ line can contain no other information.
BLP$
The file can contain any number of data sets. The ordinal number of the
data set is used to identify which data set is to be fitted.
TPF$
SP1$
SEC$.050  Commands which Apply to Both Linear & Non-linear Procedures
CY1$
CMD  Data-list   Definition or Action
---- ---------   ----------------------------------------------------

H                Displays directory to on-line help

LON              Says record all commands on log-file - fitu.log
LOF              Says only record output  on log-file 

END              Ends program

CMD  filnam      Open and process commands from filnam.cmd
CMD  filnam.ext  Open and process commands from filnam.ext

IN   filename    Open new data file (full filename required)

CSUN             Says set uncertainties to be counting statistics
ABUN             Says data-set uncertainties are in absolute units
PCUN             Says data-set uncertainties are in %
ALUN UVAL        Says set all uncertainties to UVAL(%)
USUN UVAL        Says set unspecified uncertainties to UVAL(%)
MULU FAC         Says multply all given uncertainties by FAC

XMM  XLO,XHI     Sets display X-range (min & max)
XMM              Sets display X-range defined by data

YMM  YLO,YHI     Sets display Y-range (min & max)
YMM              Sets display Y-range defined by data

LIN              Set display to be linear
LOG              Set display to be log (in the Y-direction)

STAT             Displays/logs some setup parameters

UCOM STAT        Displays/logs status provided by USERCMP

WIN  ID          Specify window ID for next display of fit results

REVV             Reverses Video (black-to-white, white-to-black)
                 You must do a FIG, then the REVV, and another FIG
                 for it to take effect.

FIG  N           Execute a standard "FIG" - i.e. like damm

CLR              Clears all FIGed windows

XON              Says X-server (graphic display)   available (default)
XOF              Says X-server (graphic display) unavailable
TPF$
SP1$
SEC$.060  Commands for Setup/Control of Spline Fitting
CY1$
CMD  Data-list   Definition or Action
---- ---------   ----------------------------------------------------

S    VAL         Set smoothing parameter to VAL (default: VAL=NDAT)

EPS  VAL         Set tolerance on parameter S   (default: VAL=SQRT(2/NDAT))

SIG  VAL         Set tension parameter SIGMA    (default: VAL=1.0)

SFIT ID          Request a spline fit to data set no. ID

SVAL X           Request spline interpolated value at abcissa X

SVAL X1 X2 DX    Request spline interpolated values for:
                 (X = X1 to X2 in steps of DX)

SSTAT            Requests display/log of spline parameters
TPF$
SP1$
SEC$.070  Commands for Setup/Control of Linear Fitting
CY1$
CMD  Data-list   Definition or Action
---- ---------   ----------------------------------------------------

LINX             Set to use FUNCS of X - F(X)      DFLT

LOGX             Set to use FUNCS of Log(X) - F(Log(X))

LINY             Set to fit Y to F(X) or F(LOG(X)) DFLT

LOGY             Set to fit Log(Y) to F(X) or F(Log(X))

XLIM XMIN,XMAX   Set fit-limits in terms of X-values

ILIM IMIN,IMAX   Set fit-limits in terms of index-I

NUFU             Says new Function (i.e sets #TERMS=0)

XPOW E1,E2..     Exponent list for power-series terms

LPOL J1,J2..     Ordinal-list for Legendre poly terms

TABL XLO,XHI,DX  Specs for computed Y vs X table

HFMT,DFMT        Table header & data formats (see SEC#080)

*                A * in col-1 of a command line results in the full
                 line being copied to log-file as a comment

FIT   ID         Fits set# ID
FITU  ID         Same as above but UNWEIGHTED
                 (if ID is omitted, previously entered ID is used)
TPF$
SP1$
SEC$.080  Expanded Definitions of Some Linear Fitting Commands
ODP$
TABL...XMIN,XMAX,DELX (range & step-size for table of
values of calculated Y vs X).
TABL without associated list deletes table request.
ODP$
XLIM...XMIN, XMAX (range of fit limits on X - default is no limit)
XLIM without subsequent list gets rid of limit.
ODP$
ILIM...ILO,IHI (range of fit limits on data point ordinals - default is no
limit).
ILIM without subsequent list gets rid of limit.
ODP$
XPOW...List of powers-of-X to be included as terms in the "fit function".
For example; XPOW=0,1,2 says include the terms X**0, X**1 and X**2
(i.e. 1.0, X and X*X).
ODP$
LPOL...List of legendre polynomial "ordinals".
For example; LPOL=2,4 says include the terms P2(X) and P4(X).
ODP$
HFMT...Heading FORMAT for first line of table of calculated values of Y
vs X.
This line contains 10 entries (0.0, DELX, 2*DELX - - -9*DELX).
ODP$
DFMT...Data FORMAT for subsequent lines of table of calculated values of
Y vs X.
These lines contain 11 entries (X-value corresponding to first Y-value and
10 Y-values).
FIP$
Note- HFMT and DFMT are not free-form entries.
These labels must start in column 1 and the actual format must follow
immediately.
No other information can be included on this line.
Examples (also the defaults) are;
CY1$
       HFMT(1H ,10X,10F10.3/)  and  DFMT(1H ,11F10.3)
ODP$
FIT....ID - says retrieve data set number ID from the input disk file
and carry out a fit as previously specified.
If ID is not entered, it is assumed that the data set is already in memory
(either typed in or previously retrieved from disk).
Only one data set is in memory at any given time.
ODP$
FITU...has the same meaning as FIT except that the fit is unweighted
(actually all points are given equal weight - namely, unity).
SP1$
SEC$.090  Definition of Some Output for Linear Fitting
ODP$
FIT-ERR(%) gives the calculated uncertainty in the associated coefficient
(determined in the fit)
based on the quality of fit (QFN) and the scatter of the data points about
the calculated values.
ODP$
EST-ERR(%) gives the calculated uncertainty in the associated coefficient
based on the quality of fit and the scatter of experimental data that
is to be expected based on the uncertainties assigned to the data.
TPF$
SP2$
SEC$.100  Commands for Setup/Control of Non-Linear Fitting
SP1$
CY1$
CMD  Data-list   Definition or Action
--------------------------------------------------------------------------

UCOM STAT        Displays/logs status provided by USERCMP

TOF  VN          Says turn fit-variable VN OFF
TON  VN          Says turn fit-variable VN ON 

SKPI I J K ...   Says skip entry ordinals I J K in computing sum RESQ
SKPI             Says remove all skips    

UCOM FUNK FID    Says select function# FID (in \b\USERFOX\\) for fitting

UCOM CPOS CID    Allows adjustable coefficient-CID to be positive only

UCOM CPOM CID    Allows adjustable coefficient-CID to be pos or neg
                 (overrides default set in USERCMP until next UCOM FUNK

NITF NIT         Sets # of iterations for coefficients for best fit 
                 to NIT (default = 20, allowed values are 1 to 100)

NITE NIT         Sets # of iterations for coefficient uncertainty estimate
                 to NIT (default = 10, allowed values are 1 to 100)

GO   ID          Do a     non-linear fit on data set# ID
GOMO ID          Continue non-linear fit of data set# ID
                 (if ID is omitted, previously entered ID is used)
SP1$
SEC$.110  A Brief Discussion of the Non-Linear Fitting Procedure
CEB$
Procedure for Determining Coefficient Values
============================================
ODP$
1......A gradient search for the coefficients giving the best fit
(smallest \b\CHISQ\\) is carried out.
ODP$
2......The starting coefficient values are changed randomly from the
best fit values by multiplying each by \b\(1.5-RAN(ISEED))\\.
ODP$
3......Steps 1 and 2 are repeated \b\NITF\\ times and coefficients leading
to the smallest \b\CHISQ\\ are recorded.
SP1$
CEB$
Procedure for Estimating Coefficient Uncertainties
==================================================
ODP$
1......The input data is randomly modified to simulate what might be
expected (from the assigned data point uncertainties) if the experiment
were repeated. 
ODP$
2......A search for the best-fit coefficients is carried out.
ODP$
3......Steps 1 & 2 are repeated \b\NITE\\ times and the coefficient
uncertainties are estimated from the spread in the best-fit coefficients
computed in steps 1 & 2.
TPF$
SP2$
SEC$.120  Template Make-file (and Comments) for Customized Processes
CY1$
Template make-file found at /usr/hhirf/fitu.make
===========================================================================
FFLAGS= -fpe2
#
OBJS= /usr/hhirf/fitu.o\
      /tera/milner/Dfitu/usercmp.o\
      /tera/milner/Dfitu/userfox.o
#
LIBS= /usr/hhirf/fitulib.a\
      /usr/hhirf/dammlib.a\
      /usr/hhirf/xglib.a\
      /usr/hhirf/dammlib.a\
      /usr/hhirf/xglib.a\
      /usr/hhirf/milibb.a\
      /usr/hhirf/orphlib.a
#
fitu: $(OBJS) $(LIBS)
#
        f77  $(FFLAGS) $(OBJS) $(LIBS) -o fitu -lX11

CEN$
\bu\Comments on Customizing\\
ODP$
o......You can modify \b\USERCMP & USERFOX\\ to create your own set of
non-linear functions. You just need to make sure that your versions
of \b\USERCMP & USERFOX\\ are compatible with each other and the rest
of the package.
ODP$
o......Don't change \b\COMMON/FTUSER/\\ since it is used by other 
routines in the package.
ODP$
o......Your version of \b\USERCMP\\ can communicate other information
to your version of \b\USERFOX\\ via other user defined common but don't
use common labels ML..., XL..., FT..., MAINV or LLL since these are
or may be defined by other routines in the package.
ODP$
o......Note that the banner labels \b\BANLAB\\ defined in \b\USERCMP\\
are just labels and have no effect on the calculations but they should
be be consistant with the associated functions in \b\USERFOX\\.
TPF$
SP1$
SEC$.130  Example Non-linear Support Routine - USERCMP
CY1$
Example user command processor for non-linear fitting
===========================================================================

      SUBROUTINE USERCMP(IWD)
C
      IMPLICIT NONE
C
C     ------------------------------------------------------------------
      COMMON/LLL/  MSSG(28),NAMPROG(2),LOGUT,LOGUP,LISFLG,MSGF
      INTEGER*4    MSSG,NAMPROG,LOGUT,LOGUP,LISFLG,MSGF
      CHARACTER*112 CMSSG
      EQUIVALENCE (CMSSG,MSSG)
C     ------------------------------------------------------------------
      COMMON/FTUSER/ NONEG(64),NV,IFUNK,UTIT
      INTEGER*4      NONEG,    NV,IFUNK
      CHARACTER*40                      UTIT
C
      DATA NONEG/64*0/     !Default - allow +/- for all coefficients
      DATA NV   /2/        !Default - 2 adjustable coefficients
      DATA IFUNK/2/        !Default - function ID=2
      DATA UTIT /'A+B*X'/  !Default - Banner label
C     ------------------------------------------------------------------
      CHARACTER*40   BANLAB(50)
C
      DATA BANLAB(1)/'A*X'/
      DATA BANLAB(2)/'A+B*X'/
      DATA BANLAB(3)/'A+B*X+C*X*X'/
      DATA BANLAB(4)/'A*DSQRT(X)'/
      DATA BANLAB(5)/'A+B*DSQRT(X)'/
      DATA BANLAB(6)/'A+B*DSQRT(X)+C*X'/
      DATA BANLAB(7)/'DSQRT(A+B*X)+C*X'/
      DATA BANLAB(8)/'A+B*X+C*DEXP(D*X)'/
      DATA BANLAB(9)/'A*(B/(C-B))*(EXP(-B*X)-EXP(-C*X))'/
C     ------------------------------------------------------------------
      INTEGER*4      IWD(20),LWD(2,40),ITYP(40),NF,NTER
C
      REAL*4         XV
C
      INTEGER*4      IV,KIND,IERR,KMD,I
C
      CHARACTER*8    FLAG
C
      CHARACTER*18   POMFLAG
C
      EQUIVALENCE    (KMD,LWD(1,1))
C     ------------------------------------------------------------------
C
      CALL GREAD(IWD,LWD,ITYP,NF,1,80,NTER)
C
      IF(NTER.NE.0) GO TO 1000
C
      IF(KMD.EQ.'FUNK') GO TO 5
      IF(KMD.EQ.'CPOS') GO TO 400
      IF(KMD.EQ.'CPON') GO TO 400
      IF(KMD.EQ.'CPOM') GO TO 400
      IF(KMD.EQ.'STAT') GO TO 500
C
      GO TO 1010
C
TPF$
SP1$
SEC$.130  Example Non-linear Support Routine - USERCMP (continued)
CY1$
C
    5 CALL MILV(LWD(1,2),IV,XV,KIND,IERR)     !Get function-ID
C
      IF(IERR.NE.0) GO TO 1000                !Tst for error
C
      IF(IV.LT.1)   GO TO 1020                !Tst for in range
      IF(IV.GT.9)   GO TO 1020                !tst for in range
C
C     ------------------------------------------------------------------
C     Set up the specified user function
C     ------------------------------------------------------------------
C
      GO TO (10,20,30,40,50,60,70,80,90) IV   !Go set it up
C
C
   10 UTIT=BANLAB(1)                          !Display banner title
      NONEG(1)=0                              !Allow negative coeff-1
      IFUNK=1                                 !Function ID
      NV=1                                    !No. of coefficients
      RETURN
C
   20 UTIT=BANLAB(2)                          !Display banner title
      NONEG(1)=0                              !Allow negative coeff-1
      NONEG(2)=0                              !Allow negative coeff-2
      IFUNK=2                                 !Function ID
      NV=2                                    !No. of coefficients
      RETURN
C
   30 UTIT=BANLAB(3)                          !Display banner title
      NONEG(1)=0                              !Allow negative coeff-1
      NONEG(2)=0                              !Allow negative coeff-2
      NONEG(3)=0                              !Allow negative coeff-3
      IFUNK=3                                 !Function ID
      NV=3                                    !No. of coefficients
      RETURN
C
   40 UTIT=BANLAB(4)                          !Display banner title
      NONEG(1)=0                              !Allow negative coeff-1
      IFUNK=4                                 !Function ID
      NV=1                                    !No. of coefficients
      RETURN
C
   50 UTIT=BANLAB(5)                          !Display banner title
      NONEG(1)=0                              !Allow negative coeff-1
      NONEG(2)=0                              !Allow negative coeff-2
      IFUNK=5                                 !Function ID
      NV=2                                    !No. of coefficients
      RETURN
C
   60 UTIT=BANLAB(6)                          !Display banner title
      NONEG(1)=0                              !Allow negative coeff-1
      NONEG(2)=0                              !Allow negative coeff-2
      NONEG(3)=0                              !Allow negative coeff-3
      IFUNK=6                                 !Function ID
      NV=3                                    !No. of coefficients
      RETURN
TPF$
SP1$
SEC$.130  Example Non-linear Support Routine - USERCMP (continued)
CY1$
C
   70 UTIT=BANLAB(7)                          !Display banner title
      NONEG(1)=1                              !Disallow neg   coeff-1
      NONEG(2)=1                              !Disallow neg   coeff-2
      NONEG(3)=0                              !Allow negative coeff-3
      IFUNK=7                                 !Function ID
      NV=3                                    !No. of coefficiemts
      RETURN
C
   80 UTIT=BANLAB(8)                          !Display banner title
      NONEG(1)=0                              !Allow negative coeff-1
      NONEG(2)=0                              !Allow negative coeff-2
      NONEG(3)=0                              !Allow negative coeff-3
      NONEG(4)=1                              !Disallow neg   coeff-4
      IFUNK=8                                 !Function ID
      NV=4                                    !No. of coefficients
      RETURN
C
   90 UTIT=BANLAB(9)                          !Display banner title
      NONEG(1)=0                              !Allow negative coeff-1
      NONEG(2)=0                              !Allow negative coeff-2
      NONEG(3)=0                              !Allow negative coeff-3
      IFUNK=9                                 !Function ID
      NV=3                                    !No. of coefficients
      RETURN
C
C     ------------------------------------------------------------------
C     Display User Status
C     ------------------------------------------------------------------
C
  400 CALL MILV(LWD(1,2),IV,XV,KIND,IERR)
C
      IF(IERR.NE.0) GO TO 1000
C
      IF(IV.LT.1)   GO TO 1030
      IF(IV.GT.NV)  GO TO 1030
C
      IF(KMD.EQ.'CPOS') NONEG(IV)=1
      IF(KMD.EQ.'CPON') NONEG(IV)=0
      IF(KMD.EQ.'CPOM') NONEG(IV)=0
C
      RETURN
C
TPF$
SP1$
SEC$.130  Example Non-linear Support Routine - USERCMP (continued)
CY1$
C
C     ------------------------------------------------------------------
C     Display User Status
C     ------------------------------------------------------------------
C
  500 WRITE(CMSSG,505)
  505 FORMAT('FUNK#  Function                                 Status')
      CALL MESSLOG(LOGUT,LOGUP)
      WRITE(CMSSG,510)
  510 FORMAT('--------------------------------------------------------')
      CALL MESSLOG(LOGUT,LOGUP)
      DO 530 I=1,9
      FLAG=' '
      IF(I.EQ.IFUNK) FLAG='SELECTED'
      WRITE(CMSSG,520)I,BANLAB(I),FLAG
  520 FORMAT(I5,'  ',A,' ',A)
      CALL MESSLOG(LOGUT,LOGUP)
      CALL MESSLOG(LOGUT,LOGUP)
  530 CONTINUE
C
      WRITE(CMSSG,510)
      CALL MESSLOG(LOGUT,LOGUP)
      DO 550 I=1,NV
      POMFLAG='Pos or neg allowed'
      IF(NONEG(I).EQ.1) THEN
      POMFLAG='Pos only   allowed'
      ENDIF
      WRITE(CMSSG,535)POMFLAG,I
  535 FORMAT(A,' for coefficient# ',I2)
      CALL MESSLOG(LOGUT,LOGUP)
  550 CONTINUE
      RETURN
C
C     ------------------------------------------------------------------
C     Send error messages
C     ------------------------------------------------------------------
C
 1000 WRITE(CMSSG,1005)
 1005 FORMAT('Syntax error or illegal value - command ignored')
      GO TO 2000
C
 1010 WRITE(CMSSG,1015)
 1015 FORMAT('User command not recognized - command ignored')
      GO TO 2000
C
 1020 WRITE(CMSSG,1025)
 1025 FORMAT('User function ID out of range - command ignored')
      GO TO 2000
C
 1030 WRITE(CMSSG,1035)
 1035 FORMAT('User coefficient ID out of range - command ignored')
      GO TO 2000
C
 2000 CALL MESSLOG(LOGUT,LOGUP)
      RETURN
      END
TPF$
SP1$
SEC$.140  Example Non-linear Support Routine - USERFOX
CY1$
Example user-supplied function for non-linear fitting
===========================================================================

      REAL*8 FUNCTION USERFOX(A,X)
C
      IMPLICIT NONE
C
C     ------------------------------------------------------------------
      COMMON/FTUSER/ NONEG(64),NV,IFUNK,UTIT
      INTEGER*4      NONEG,    NV,IFUNK
      CHARACTER*40                      UTIT
C     ------------------------------------------------------------------
      REAL*8         A(*),X,DENO,DABS
C     ------------------------------------------------------------------
C
      GO TO (10,20,30,40,50,60,70,80,90) IFUNK
C
   10 USERFOX=A(1)*X
      RETURN
C
   20 USERFOX=A(1) + A(2)*X
      RETURN
C
   30 USERFOX=A(1) + A(2)*X + A(3)*X*X
      RETURN
C
   40 USERFOX=A(1)*DSQRT(X)
      RETURN
C
   50 USERFOX=A(1) + A(2)*DSQRT(X)
      RETURN
C
   60 USERFOX=A(1) + A(2)*DSQRT(X) + A(3)*X
      RETURN
C
   70 USERFOX=DSQRT(A(1) + A(2)*X) + A(3)*X
      RETURN
C
   80 USERFOX=A(1) + A(2)*X + A(3)*DEXP(A(4)*X)
      RETURN
C
   90 DENO=A(3)-A(2)
      IF(DABS(DENO).LT.1.0E-9) DENO=-1.0E-9
      USERFOX=A(1)*(A(2)/DENO)*(DEXP(-A(2)*X)-DEXP(-A(3)*X))
C
      END
TPF$
SP2$
SEC$.150  Commands Related to Filename Variables, Symbols & Loops
CYB$
Filname Variables 
BLP$ 
One symbol (integer variable) may be incorporated in a FILENAME
specification as the following examples illustrate:
CY1$
SYM=3
IN FIL"SYM".DAT   ;Opens FIL3.DAT for input 

I=0 
LOOP 3
I=I+1
IN  FIL"I".DAT   ;Opens (in succession)  FIL1.DAT, FIL2.DAT, FIL3.DAT
.   
.   
ENDLOOP
CYB$
LOOP execution and symbol definition
CY1$
 
Commands related to LOOP execution and SYMBOL definition 

SYM = EXPRESSION   Define symbol (SYM) up to 100 symbols supported
                   symbols M, N, O, P, Q, R, S are reserved
                   expression syntax is same as in CHIL
                   no imbedded blanks are allowed in expressions
                   symbols may contain up to 4 characters (5-8 ignored)
    
DSYM               Displays list of currently defined sumbols & values
    
LOOP N             Starts LOOP (executed N-times) N=SYM or CONST
CMD  ....          Nesting supported
CMD  ....          # lines between 1st LOOP & matching ENDL = 100
ENDL               Defines end-of-loop
                   KILL (entered before ENDL) kills LOOP
                   Ctrl/C - aborts loop-in-progress
                   opening of CMD-file within a LOOP not allowed
TPF$
SP2$
SEC$.160  Comments
ODP$
(1)....Unless you have a very small number of data points to fit,
I suggest that you create a file (fil.dat for example) which
contains the data sets to be fitted. After the program is started,
open the file with the command - IN fil.dat
ODP$
(2)....Note that the data file does not contain actual ID-number
entries. The ID referred to in the FIT (or GO) command is just the 
ordinal
number of the data set in the file. This may not be the best way to
do it but that's the way it is.
ODP$
(3)....If your fitting procedure will involve numerous commands, it
is probably best to create a command file (fil.cmd for example)
rather than entering them at run-time.
If you have both a fil.dat and a fil.cmd, then all you have to do is:
CYB$
Type:  FITU
Type:  IN   fil.dat
Type:  CMD  fil.cmd

And that's it.
QIT$
