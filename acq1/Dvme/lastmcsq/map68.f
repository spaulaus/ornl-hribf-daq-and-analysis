*   PROGRAM CONVERTS THE 'MAP' OUTPUT OF THE OASYS LINKER INTO
*   SOMETHING A LITTLE MORE READABLE.
*
*   TWO SYMBOL TABLE LISTINGS ARE OUTPUT: 1) ALPHABETICAL ORDER
*   2) ADDRESS ORDER.
*
*   INFORMATION ON PROGRM LOAD LIMITS IS OUTPUT JUST AS IT WAS
*   IN THE OASYS MAP FILE.
*
*   OUTPUT IS FORMATED AS 80 CHAR LINES SUITABLE FOR THE LASER
*   PRINTER ON PHYVAX.
*
*  9/10/88  MCSQ
*
*  REVISIONS:  9/14/88  INCREASED SIZE OF ARRAY 'LOAD_LIMITS' TO ALLOW
*                       FOR LINK ERROR SUMMARY LINES.
*
	IMPLICIT NONE
*
        integer*4  MAX_NUM_SYM
	PARAMETER (MAX_NUM_SYM = 1000)
*
        integer*4 strlen
	INTEGER*4 I,J,K,L
	INTEGER*4 PAGE_NUM,LINE_COUNT
	CHARACTER*70 IFILE_NAME,ofile_name
	CHARACTER*132 LINE
	CHARACTER*75  LOAD_LIMITS(25)
        CHARACTER*4  TOF
*
	STRUCTURE /SYMTAB/
	   CHARACTER*30 SYMBOL
	   INTEGER*2    SYM_LEN
	   CHARACTER*8  VALUE
	END STRUCTURE
*
	RECORD /SYMTAB/ SYMBOL(MAX_NUM_SYM)
*
	COMMON TOF,PAGE_NUM,LINE_COUNT,iFILE_NAME,SYMBOL
*
*  Open input and output files
*
        call getarg(1,ifile_name)
        open (unit=1,file=ifile_name)
        call getarg(2,ofile_name)
        open (unit=2,file=ofile_name)
*
*  READ THE MAP FILE PRODUCED BY OASYS LINKER AND EXTRACT ALL
*  SYMBOL DEFINITIONS.
*
        TOF(1:1) = CHAR(12)
	I=0
	L=0
100	READ (1,1000,END=300) LINE
	IF (LINE .EQ. 'PROGRAM LOAD LIMITS') THEN
	   L=L+1
	   LOAD_LIMITS(L) = LINE
110	   L=L+1
	   IF (L .GT. 25) GO TO 120
	   READ (1,1000,END=120) LOAD_LIMITS(L)
	   GO TO 110
*
120	   L=L-1
	   GO TO 300
	ENDIF
*
	IF (INDEX(LINE,'-') .NE. 0) GO TO 100
	IF (INDEX(LINE,'=') .EQ. 0) GO TO 100
	J=0
130	J=J+1
	IF (J .GE. 123) GO TO 100
	IF (LINE(J:J) .EQ. ' ') GO TO 130
	K=J
140	K=K+1
	IF (K .GT. 132) GO TO 100
	IF (LINE(K:K) .NE. '=') GO TO 140
	I=I+1
	SYMBOL(I).SYMBOL = LINE (J:K-1)
	SYMBOL(I).SYM_LEN = K-J
	K=K+1
	SYMBOL(I).VALUE = LINE(K:K+7)
	J=K+7
	IF (I .EQ. MAX_NUM_SYM) THEN
	   TYPE *,'**** SYMBOL TABLE OVERFLOW!! ****'
	   GO TO 300
	ENDIF
	GO TO 130
*
*  THE ARRAY SYMBOL IS SORTED TO PRODUCE AN ALPHABETIC LISTING AND
*  AN ADDRESS ORDERED LISTING OF THE SYMBOLS.
*
300	INQUIRE (UNIT=1,NAME=iFILE_NAME)
	CALL ORDER(I,1)
	CALL SYM_LIST(I,'ALPHA')
*
	CALL ORDER(I,2)
	CALL SYM_LIST(I,'NUMERIC')
*
	IF (LINE_COUNT .NE. 2) PAGE_NUM=PAGE_NUM+1
	WRITE (2,9000) TOF,iFILE_NAME,PAGE_NUM
	DO 330 J=1,L
	WRITE(2,9010) LOAD_LIMITS(J)(1:strlen(load_limits(j)))
330	CONTINUE
*
1000	FORMAT (A)
9000	FORMAT (A1,A,T74,'Page',I3,/)
9010	FORMAT (A)
	END
	SUBROUTINE ORDER(NSYM,ELEMENT)
*
	IMPLICIT NONE
*
        integer*4 MAX_NUM_SYM
	PARAMETER (MAX_NUM_SYM = 1000)
*
	INTEGER*4 I,J,L,M,NSYM,ELEMENT
	INTEGER*4 PAGE_NUM,LINE_COUNT
	CHARACTER*70 iFILE_NAME
        CHARACTER*4  TOF
*
	STRUCTURE /SYMTAB/
	   CHARACTER*30 SYMBOL
	   INTEGER*2    SYM_LEN
	   CHARACTER*8  VALUE
	END STRUCTURE
*
	RECORD /SYMTAB/ SYMBOL(MAX_NUM_SYM),SAVE
*
	COMMON TOF,PAGE_NUM,LINE_COUNT,iFILE_NAME,SYMBOL
*
	IF (NSYM .EQ. 0) RETURN
*
	M=NSYM
100	M=M/2
	IF (M .EQ. 0) RETURN
	DO 120 J=1,NSYM-M
	I=J
110	L=I+M
*
*  COMPARE RECORDS
*
	IF (ELEMENT .EQ. 1) THEN
	   IF (SYMBOL(I).SYMBOL .LE. SYMBOL(L).SYMBOL) GO TO 120
	ELSE
	   IF (SYMBOL(I).VALUE .LE. SYMBOL(L).VALUE) GO TO 120
	ENDIF
*
*   EXCHANGE RECORDS
*
	SAVE = SYMBOL(I)
	SYMBOL(I) = SYMBOL(L)
	SYMBOL(L) = SAVE
	I=I-M
	IF (I .GE. 1) GO TO 110
120	CONTINUE
	GO TO 100
	END
	SUBROUTINE SYM_LIST(NSYM,FUNC)
*
	IMPLICIT NONE
*
        integer*4 MAX_NUM_SYM
	PARAMETER (MAX_NUM_SYM = 1000)
*
        character*80 cbuf
        integer*4 cc,strlen
	INTEGER*4 J,K
	INTEGER*4 LEN,LBUF,NEXT,NSYM
	INTEGER*4 PAGE_NUM,LINE_COUNT
	CHARACTER*70 iFILE_NAME
	CHARACTER*(*) FUNC
        CHARACTER*4  TOF
*
	STRUCTURE /SYMTAB/
	   CHARACTER*30 SYMBOL
	   INTEGER*2    SYM_LEN
	   CHARACTER*8  VALUE
	END STRUCTURE
*
	RECORD /SYMTAB/ SYMBOL(MAX_NUM_SYM),SAVE
*
	COMMON TOF,PAGE_NUM,LINE_COUNT,iFILE_NAME,SYMBOL
*
	IF (LINE_COUNT .NE. 2) THEN
	   PAGE_NUM=PAGE_NUM+1
	   WRITE (2,9010) TOF,iFILE_NAME,PAGE_NUM
	   LINE_COUNT=2
	ENDIF
	LBUF=1
  	CBUF = ' '
*
	DO 120 J=1,NSYM
	LEN = SYMBOL(J).SYM_LEN
	CC = 9 + LEN
	IF (FUNC .EQ. 'ALPHA') THEN
 	   write(cbuf(lbuf:),9000) SYMBOL(J).SYMBOL(1:LEN),
	1                              SYMBOL(J).VALUE
	ELSE
           write(cbuf(lbuf:),9000) SYMBOL(J).VALUE,
	1                              SYMBOL(J).SYMBOL(1:LEN)
	ENDIF
	LBUF = LBUF +20
	CC=CC -18
100	IF (CC .GT. 0) THEN
	   LBUF = LBUF + 20
	   CC = CC - 20
	   GO TO 100
	ENDIF
	NEXT = 0
	IF (J .LT. MAX_NUM_SYM) NEXT = SYMBOL(J+1).SYM_LEN
	NEXT = NEXT + 9 + (LBUF-1)
	IF (LBUF .GT. 80 .OR. NEXT .GT. 80) THEN
	   LINE_COUNT = LINE_COUNT + 1
	   IF (LINE_COUNT .GE. 60) THEN
	      LINE_COUNT = 2
	      PAGE_NUM=PAGE_NUM+1
	      WRITE (2,9010) TOF,iFILE_NAME,PAGE_NUM
	   ENDIF
	   WRITE (2,9020) CBUF(1:strlen(cbuf))
	   LBUF = 1
   	   CBUF = ' '
	ENDIF
120	CONTINUE
	IF (LBUF .NE. 1) WRITE (2,9020) CBUF(1:strlen(cbuf))
*
9000	FORMAT (A,'=',A)
9010	FORMAT (A1,A,T74,'Page',I3,/)
9020	FORMAT (A)
*
	END
