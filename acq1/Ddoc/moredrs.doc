RPD$075059001
NPS$01
CHP$2030  - MORE DRSLIB Revised 11/30/97
TPF$
SP1$
CY1$
  SECTION   ROUTINE             FUNCTION

      010  INTRODUCTION

      020  DANFYSIK_COMMAND - Send ASCII command to DANFYSIK power supply
      030  DANFYSIK_ERROR   - Convert error number to ASCII string

      040  ADC_READ      - Read all ADC channels.
      050  ADC_ERROR     - Convert error number to ASCII string

      060  STEPPER_MOVE  - Drive a stepping motor
      070  STEPPER_STAT  - Get status of the stepping motor controller.
      080  STEPPER_ERROR - Return ASCII message for an STEPPER errors.

BLP$
SEC$.010 INTRODUCTION
SIN$
BLP$
This document describes a set of FORTRAN callable routines for various
hardware devices associated with the DRS.  There is a separate document
for the Varian Ion Gauge Controllers - 
\b\/usr/users/mcsq/Drms/rmsigc.doc\\.
BLP$
These routines are in the library - \b\/usr/users/mcsq/Ddrs/drslib.a\\.
BLP$
SEC$.070 DANFYSIK_COMMAND - Send ASCII command string to Danfysik supply.
SIN$
BLP$
All commands and responses are ASCII strings.  See the Danfysik manual
for a list of commands and responses.
CY1$
 
  Call:   CALL DANFYSIK_COMMAND(CTRL,CMD,REPLY,NUM,IERR)
 
  where:   CTRL      - INT*4       - Controller number
           CMD       - CHARACTER*  - Command string
           REPLY(*)  - CHARACTER*  - Array of reply strings.
           NUM       - INT*4       - Dimension of REPLY
  return:
           IERR   - INT*4 - Returned status of call.  Zero means OK
                            and nonzero means an error.
 
BLP$
SEC$.030 DANFYSIK_ERROR - Return ASCII message for a DANFYSIK error.
SIN$
BLP$
This routine converts an error code returned by DANFYSIK_COMMAND
to an ASCII string stored in the FORTRAN character variable STRING.
CY1$
 
  Call:   CALL DANFYSIK_ERROR(ERROR,STRING)
 
  where:
            INT*4  ERROR - Error code return by a call to DANFYSIK_COMMAND
  return:
            CHARACTER*(*)  -  ASCII message for this error code.

BLP$
SEC$.040 ADC_READ - Read analog input channels
SIN$
BLP$
The ADC system consists of two DATEL 613 modules and one VMIC 3128A module.
There are a total of 80 channels available.  Each channels is configured for
-10 to +10 volt inputs. The first 16 channels are from the DATEL 613 modules
and have 15-bit resolution.  The remaining 64 channels are from the VMIC
3128A module and have 13-bit resolution.
A call to ADC_READ returns the data for all 80 channels in REAL*4 format.
Units are volts.
CY1$
 
  Call:   CALL ADC_READ(DAT,IERR)
 
  return:
           DAT(80) - REAL*4  Array
           IERR    - INT*4 - Returned status of call.  Zero means OK
                             and nonzero means an error.
 
BLP$
SEC$.050 ADC_ERROR - Return ASCII message for an ADC_READ error.
SIN$
BLP$
This routine converts an error code returned by ADC_READ to an ASCII string
stored in the FORTRAN character variable STRING.
CY1$
 
  Call:   CALL ADC_ERROR(ERROR,STRING)
 
  where:
            INT*4  ERROR - Error code return by a call to ADC_READ
  return:
            CHARACTER*(*)  -  ASCII message for this error code.

BLP$
SEC$.060 STEPPER_MOVE - Drive a stepping motor
SIN$
BLP$
The DRS has 6 stepping motors.  Each motor has two limit switches.
BLP$
The motor direction is specified as CW (clockwise) or CCW (counter clockwise).
The call argument
DIR specifies the move direction.  Zero means CW and non-zero means CCW.  The
stepping motor controller deals in steps and all position and speed calling
arguments are in steps and steps per second.  All motion commands are
relative to the current position.
BLP$
At most one motor has power applied a any time.  All other motors are 
powered down.  The call argument MOT specifies which motor is to be powered.
The argument must be in the range of 0 thru 6.  Zero means to power down
ALL motors.  Also, when MOT is zero, no other call arguments have any
meaning.  The VME software keeps track of which motor is powered on.
When there is a change in the motor selection,  all motors are powered down
for 1 second and then the newly selected motor powered up for 1 second before
the specified motion command begins execution.
BLP$
There are two speed arguments, LSPEED and HSPEED.  Both are specified in
steps per second.  If LSPEED equals HSPEED, the motor runs at constant 
speed.  Constant speed may also be specified by setting LSPEED non-zero
and setting HSPEED to zero.  If LSPEED and HSPEED are both non-zero,
HSPEED must be greater than or equal to LSPEED.  In this case, the motor
starts at LSPEED and ramps up to HSPEED.  Also there is a ramp down form
HSPEED to LSPEED at the end of the move.  The argument RAMP specifies the
time in seconds to ramp from LSPEED to HSPEED and from HSPEED to LSPEED.
The maximum ramp time is approx. 33.5 seconds.  However, this ramp time
depends on the specified speed and the difference between the two speeds.
You may specify any positive value for RAMP.  The motor controller will execute
your request or the maximum it can do.  The minimum LSPEED is 1 and the
maximum is 8000.  HSPEED must be in the range of 0 thru 8000.
BLP$
The call argument STEPS is the number of steps to move.  The argument
POSIT is arbitrary.  It has no effect on the operation of the motor
controller.  The value specified by POSIT is loaded into a 24-bit
counter in the stepping motor controller.  If the direction is CW,
the counter is incremented for each step of the motor.  If the direction
is CCW, the counter is decremented for each step.  The final value of
the counter is returned by a call to STEPPER_STAT.  If the motion 
terminates normally, the final value should be POSIT plus STEPS.  If,
however, the motion is stopped by a limit switch, the final value will
be POSIT plus the number of steps done.
BLP$
A call to STEPPER_MOVE returns when the requested motion is started.
The user must use the routine STEPPER_STAT to determine when the motion
command has finished execution.  If you call STEPPER_MOVE before the
previous command has finished,  the motor is stopped and restarted with
the new parameters!
BLP$
If IERR is non-zero on return, an error has occured.  The routine
STEPPER_ERROR may be used to convert the error code in IERR to a
printable ASCII message.
CY1$

  Call:   CALL STEPPER_MOVE(MOT,DIR,STEPS,LSPEED,HSPEED,RAMP,POSIT,IERR)

  where:  MOT    - INT*4 - Motor number (0 thru 6). Zero means turn off all
                           motors.  Non-zero selects one of 6 motors.
          DIR    - INT*4 - Move direction, 0 = CW, nonzero = CCW
          STEPS  - INT*4 - Number of steps to move
          LSPEED - INT*4 - Low speed in steps per second
          HSPEED - INT*4 - High speed in steps per second
          RAMP   - INT*4 - Time to ramp from low to high speed in seconds
          POSIT  - INT*4 - Current position in steps
 return:
          IERR   - INT*4 - Returned status of call.  Zero means OK
                           and nonzero means an error.

BLP$
SEC$.070 STEPPER_STAT - Get status of the stepping motor controller.
SIN$
BLP$
A call to STEPPER_MOVE returns as soon as the requested motion command
begins.   You must use STEPPER_STAT to determine the state of the motion
request.  The routine returns the status of the motor controller, the
current position in steps, a 24-bit digital input register and a 24-bit
digital output register.  The primary motor status is returned in the 
least significant byte of STAT.  I number bits 0 thru 31 with D0 being
the least significant bit in the 32-bit integer.  The bits in STAT
have the following meanings:
CY1$
          D7  D6  D5  D4  D3  D2  D1  D0     STAT
           |   |   |   |   |   |   |   |
           |   |   |   |   |   |   |    0 = No motor at CCW limit
           |   |   |   |   |   |   |    1 = Some motor at CCW limit
           |   |   |   |   |   |    0 = Selected motor not at CW limit
           |   |   |   |   |   |    1 = Selected motor at CW limit
           |   |   |   |   |     Don't care
           |   |   |   |    0 = Down counter non-zero
           |   |   |   |    1 = Down counter is zero
           |   |   |    Don't care
           |   |    0 = ramping up or ramping down
           |   |    1 = constant speed or stopped
           |    0 = motor stopped
           |    1 = motor running
            Don't care
BLP$
A call to STEPPER_MOVE loads the down counter with the argument STEPS.
The down counter decrements by one for each step.  If the move terminates
normally, the down counter will be zero when the motor stops.  However,
the motion is stopped by a limit switch, the down counter may be non-zero.
You cannot read the down counter but the POSIT returned can be used to
determine the number of steps executed.
BLP$
If D4 is zero, the motor is ramping.  The extended status in ESTAT
has bits to determine if the ramping is up or down.
BLP$
The 16-bit extended motor controller status is returned in ESTAT.  The
state of the limit switches appear both in STAT and ESTAT.  The upper
8-bits of the extended status are valid only if the motor is stopped.
CY1$
          D7  D6  D5  D4  D3  D2  D1  D0     ESTAT
           |   |   |   |   |   |   |   |
           |   |   |   |   |   |   |    Don't care
           |   |   |   |   |   |    Don't care
           |   |   |   |   |     0 = No motor at CCW limit
           |   |   |   |   |     1 = Some motor at CCW limit
           |   |   |   |    0 = Selected motor not at CW limit
           |   |   |   |    1 = Selected motor at CW limit
           |   |   |    0 = Not ramping up
           |   |   |    1 = Ramping up
           |   |    0 = Not ramping down
           |   |    1 = Ramping down
           |    0 = Not ramping down
           |    1 = Ramping down
            Don't care

CY1$
          D15 D14 D13 D12 D11 D10 D9  D8     ESTAT
           |   |   |   |   |   |   |   |
           |   |   |   |   |   |   |    1 = Stopped by CCW limit
           |   |   |   |   |   |    1 = Stopped by CW limit
           |   |   |   |   |     Don't care
           |   |   |   |    1 = Normal stop (i.e. completed move)
           |   |   |    Don't care
           |   |    Don't care
           |    1 = Stop command
            Don't care
BLP$
Returned in DIN and DOUT are the digital I/O bits which read all limit
switches and select which, if any, motor is powered.   The state of the
limit switches is in D0 - D11 of DIN.  The motor selection code is in
D16 - D23 of both DIN and DOUT.  Bits D0 - D15 DOUT
should be all 1s meaning input is enabled for these bits.
BLP$
The motor selection code, D16 - D23 in DIN and DOUT, should match the
MOT argument in the last call to STEPPER_MOVE provided MOT was non-zero.
When all motors are powered off, the motor selection codes is all 1s.
BLP$
The limit switch readout, D0 - D11 of DIN, is as follows:
CY1$
          D7  D6  D5  D4  D3  D2  D1  D0     DIN  
           |   |   |   |   |   |   |   |
           |   |   |   |   |   |   |    1 = Motor #1 at CW limit
           |   |   |   |   |   |    1 = Motor #2 at CW limit
           |   |   |   |   |     1 = Motor #3 at CW limit
           |   |   |   |    1 = Motor #4 at CW limit
           |   |   |    1 = Motor #5 at CW limit
           |   |    1 = Motor #6 at CW limit
           |    1 = Motor #1 at CCW limit
            1 = Motor #2 at CCW limit

CY1$ 
          D15 D14 D13 D12 D11 D10 D9  D8     DIN  
           |   |   |   |   |   |   |   |
           |   |   |   |   |   |   |    1 = Motor #3 at CCW limit
           |   |   |   |   |   |    1 = Motor #4 at CCW limit
           |   |   |   |   |     1 = Motor #5 at CCW limit
           |   |   |   |    1 = Motor #6 at CCW limit
           |   |   |    Not Used
           |   |    Not Used
           |    Not Used
            Not Used

CY1$ 

  Call:   CALL STEPPER_STAT(STAT,ESTAT,POSIT,DIN,DOUT,IERR)

  return:
          STAT   - INT*4 - Primary status    8-bits
          ESTAT  - INT*4 - Extended status  16-bits
          POSIT  - INT*4 - Current position
          DIN    - INT*4 - Digital input register
          DOUT   - INT*4 - Read-back of digital output register
          IERR   - INT*4 - Returned status of call.  Zero means OK
                           and nonzero means an error.

BLP$
SEC$.080 STEPPER_ERROR - Return ASCII message for an STEPPER errors.
SIN$
BLP$
This routine converts an error code returned by STEPPER_MOVE or STEPPER_STAT
to an ASCII string
stored in the FORTRAN character variable STRING.
CY1$

  Call:   CALL STEPPER_ERROR(ERROR,STRING)

  where:
           INT*4  ERROR - Error code return by a routine in this package
  return:
           CHARACTER*(*)  -  ASCII message for this error code.
QIT$
